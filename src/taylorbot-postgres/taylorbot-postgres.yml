trigger:
  branches:
    include:
    - adam
  paths:
    include:
    - src/taylorbot-postgres

pr:
  branches:
    include:
    - master
  paths:
    include:
    - src/taylorbot-postgres

resources:
- repo: self

variables:
  artifactName: taylorbot-sqitch
  archiveName: taylorbot-sqitch-bundle.tgz

stages:
- stage: build
  displayName: 'Bundle sqitch project'
  jobs:
  - job: build
    displayName: 'Bundle, test and archive sqitch project'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      sqitchSourceFolderPath: '$(Build.SourcesDirectory)/src/taylorbot-postgres/sqitch'
      sqitchBundleOutputFolderName: taylorbot-sqitch-bundle
      bundleArchiveFilePath: '$(Build.ArtifactStagingDirectory)/$(archiveName)'
    steps:
    - script: |
        # Necessary so files can be created in the mount
        user=${USER-$(whoami)}
        docker container run \
          --user $(id -u ${user}):$(id -g ${user}) \
          --rm \
          --mount type=bind,source=$(sqitchSourceFolderPath),target=/repo \
          sqitch/sqitch:latest \
          bundle --dest-dir $(sqitchBundleOutputFolderName)
      displayName: 'Bundle sqitch project'

    - script: |
        set -o errexit
        set -o pipefail
        set -o nounset

        network_name=taylorbot-sqitch-test-network
        container_name=taylorbot-sqitch-test-postgres

        docker network create ${network_name}

        docker container run \
          --detach \
          --name ${container_name} \
          --network ${network_name} \
          --env POSTGRES_PASSWORD=toor \
          postgres:12

        sleep 10s

        db_name=sqitch-test-database
        role_name=taylorswift
        role_password=welcometonewyork1989

        docker exec --interactive ${container_name} \
          psql --username=postgres --command="CREATE ROLE ${role_name} WITH LOGIN PASSWORD '${role_password}';"
        docker exec --interactive ${container_name} \
          createdb --username=postgres --owner=${role_name} ${db_name}
        docker exec --interactive ${container_name} \
          psql --username=postgres --dbname=${db_name} --command="CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;"

        docker container run \
          --rm \
          --network ${network_name} \
          --mount type=bind,source=$(sqitchSourceFolderPath)/$(sqitchBundleOutputFolderName),dst=/repo \
          sqitch/sqitch:latest \
          deploy db:pg://${role_name}:${role_password}@${container_name}/${db_name}

        docker container run \
          --rm \
          --network ${network_name} \
          --mount type=bind,source=$(sqitchSourceFolderPath)/$(sqitchBundleOutputFolderName),dst=/repo \
          sqitch/sqitch:latest \
          revert -y db:pg://${role_name}:${role_password}@${container_name}/${db_name}
      displayName: 'Test sqitch bundle on new database'

    - script: tar -czf $(bundleArchiveFilePath) --directory $(sqitchSourceFolderPath)/$(sqitchBundleOutputFolderName) .
      displayName: 'Create bundle archive'

    - publish: $(bundleArchiveFilePath)
      artifact: $(artifactName)
      displayName: 'Publish sqitch bundle archive'


- stage: deploy
  displayName: 'TaylorBot'
  dependsOn: build
  condition: and(succeeded(), and(eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  jobs:
    - deployment: deploy_database
      displayName: 'Deploy to remote database'
      environment: taylorbot
      strategy:
        runOnce:
          deploy:
            steps:
            # This assumes we have set up a remote postgres cluster with a "taylorbot" role who all privileges on a "taylorbot" database
            - script: |
                set -o errexit
                set -o pipefail
                set -o nounset

                sqitch_bundle_path=$(Pipeline.Workspace)/taylorbot-sqitch-bundle
                mkdir ${sqitch_bundle_path}

                tar -xvf $(Pipeline.Workspace)/$(artifactName)/$(archiveName) --directory ${sqitch_bundle_path} --strip-components=1

                docker container run \
                  --rm \
                  --mount type=bind,source=${sqitch_bundle_path},dst=/repo \
                  sqitch/sqitch:latest \
                  deploy db:pg://taylorbot:${ROLE_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/taylorbot
              displayName: 'Deploy sqitch bundle to remote database'
              env:
                POSTGRES_HOST: $(taylorbot_postgres_host)
                POSTGRES_PORT: $(taylorbot_postgres_port)
                ROLE_PASSWORD: $(taylorbot_postgres_password)
